import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Tuple, Optional, List, Dict


def load_data(filepath: str) -> Tuple[np.ndarray, np.ndarray]:
    """加载数据集
    
    参数:
        filepath: 数据文件路径
        
    返回:
        X: 特征矩阵
        y: 目标向量
    """
    data = pd.read_csv(filepath)
    X = data.iloc[:, :-1].values
    y = data.iloc[:, -1].values
    return X, y


def feature_normalize(X: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    """特征归一化
    
    参数:
        X: 特征矩阵
        
    返回:
        X_normalized: 归一化后的特征矩阵
        mean: 特征均值
        std: 特征标准差
    """
    mean = np.mean(X, axis=0)
    std = np.std(X, axis=0)
    std[std == 0] = 1  # 防止除以零
    X_normalized = (X - mean) / std
    return X_normalized, mean, std


def add_intercept(X: np.ndarray) -> np.ndarray:
    """为特征矩阵添加截距项（常数项）
    
    参数:
        X: 特征矩阵
        
    返回:
        X_with_intercept: 添加截距项后的特征矩阵
    """
    intercept = np.ones((X.shape[0], 1))
    return np.hstack((intercept, X))


def compute_cost(X: np.ndarray, y: np.ndarray, theta: np.ndarray) -> float:
    """计算代价函数
    
    参数:
        X: 特征矩阵
        y: 目标向量
        theta: 模型参数
        
    返回:
        cost: 代价函数值
    """
    m = X.shape[0]
    predictions = X.dot(theta)
    errors = predictions - y
    cost = (1 / (2 * m)) * np.sum(errors ** 2)
    return cost


def gradient_descent(X: np.ndarray, y: np.ndarray, theta: np.ndarray, 
                     alpha: float, iterations: int) -> Tuple[np.ndarray, List[float]]:
    """执行梯度下降优化参数
    
    参数:
        X: 特征矩阵
        y: 目标向量
        theta: 初始参数
        alpha: 学习率
        iterations: 迭代次数
        
    返回:
        theta: 最优参数
        cost_history: 代价函数历史记录
    """
    m = X.shape[0]
    theta = theta.copy()
    cost_history = []
    
    for i in range(iterations):
        predictions = X.dot(theta)
        errors = predictions - y
        gradients = (1 / m) * X.T.dot(errors)
        theta -= alpha * gradients
        
        cost = compute_cost(X, y, theta)
        cost_history.append(cost)
        
        if i % 100 == 0 and i > 0:
            print(f"迭代 {i}: 代价函数 = {cost:.6f}")
    
    return theta, cost_history


def plot_cost_history(cost_history: List[float], iterations: int) -> None:
    """绘制代价函数变化曲线
    
    参数:
        cost_history: 代价函数历史记录
        iterations: 迭代次数
    """
    plt.figure(figsize=(10, 6))
    plt.plot(range(iterations), cost_history)
    plt.xlabel('迭代次数')
    plt.ylabel('代价函数 J(θ)')
    plt.title('代价函数收敛过程')
    plt.grid(True)
    plt.show()


def plot_regression_line(X: np.ndarray, y: np.ndarray, theta: np.ndarray,
                         X_mean: Optional[np.ndarray] = None, 
                         X_std: Optional[np.ndarray] = None) -> None:
    """绘制回归线与数据点
    
    参数:
        X: 特征矩阵
        y: 目标向量
        theta: 模型参数
        X_mean: 特征均值（可选）
        X_std: 特征标准差（可选）
    """
    if X.shape[1] != 1:
        raise ValueError("只支持单变量线性回归")
    
    plt.figure(figsize=(10, 6))
    plt.scatter(X, y, color='blue', label='数据点')
    
    X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
    
    if X_mean is not None and X_std is not None:
        X_range_normalized = (X_range - X_mean) / X_std
        X_range_with_intercept = add_intercept(X_range_normalized)
    else:
        X_range_with_intercept = add_intercept(X_range)
    
    y_pred = X_range_with_intercept.dot(theta)
    plt.plot(X_range, y_pred, color='red', label='回归线')
    
    plt.xlabel('X (特征)')
    plt.ylabel('y (目标)')
    plt.title('单变量线性回归')
    plt.legend()
    plt.grid(True)
    plt.show()


def normal_equation(X: np.ndarray, y: np.ndarray) -> np.ndarray:
    """使用正规方程求解线性回归参数
    
    参数:
        X: 特征矩阵
        y: 目标向量
        
    返回:
        theta: 最优参数
    """
    X = add_intercept(X)
    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)
    return theta


def generate_synthetic_data(n_samples: int = 100, noise_level: float = 3.0, 
                            random_state: int = 42) -> Tuple[np.ndarray, np.ndarray]:
    """生成合成数据集用于测试
    
    参数:
        n_samples: 样本数量
        noise_level: 噪声水平
        random_state: 随机种子
        
    返回:
        X: 特征矩阵
        y: 目标向量
    """
    np.random.seed(random_state)
    X = np.random.rand(n_samples, 1) * 10
    y = 5 + 2 * X.flatten() + np.random.randn(n_samples) * noise_level
    return X, y


def evaluate_model(y_true: np.ndarray, y_pred: np.ndarray) -> Dict[str, float]:
    """评估模型性能
    
    参数:
        y_true: 真实目标值
        y_pred: 预测值
        
    返回:
        metrics: 各种评估指标
    """
    mse = np.mean((y_true - y_pred) ** 2)
    rmse = np.sqrt(mse)
    mae = np.mean(np.abs(y_true - y_pred))
    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)
    ss_res = np.sum((y_true - y_pred) ** 2)
    r2 = 1 - (ss_res / ss_tot)
    
    return {
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'R^2': r2
    }


def save_model(theta: np.ndarray, X_mean: Optional[np.ndarray] = None,
               X_std: Optional[np.ndarray] = None, filepath: str = 'model.npz') -> None:
    """保存模型参数
    
    参数:
        theta: 模型参数
        X_mean: 特征均值
        X_std: 特征标准差
        filepath: 保存路径
    """
    if X_mean is not None and X_std is not None:
        np.savez(filepath, theta=theta, X_mean=X_mean, X_std=X_std)
    else:
        np.savez(filepath, theta=theta)
    print(f"模型已保存到 {filepath}")


def load_model(filepath: str = 'model.npz') -> Dict[str, np.ndarray]:
    """加载模型参数
    
    参数:
        filepath: 模型文件路径
        
    返回:
        model_data: 包含模型参数的字典
    """
    model_data = np.load(filepath)
    model_dict = {key: model_data[key] for key in model_data.files}
    print(f"模型已从 {filepath} 加载")
    return model_dict
